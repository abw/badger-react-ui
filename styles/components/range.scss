// Temporary hack to update values in badger-css (which will be updated soon)
:where(.range) {
  --track-background: var(--color-85);
  --track-border: var(--color-70);
  --track-fill: var(--color-50);
  --track-dragging: var(--color-55);
  --thumb-color: var(--track-fill);
  --shadow-color: color-mix(in srgb, var(--thumb-color), black 20%);
  --shadow-focus-color: color-mix(in srgb, var(--thumb-color), transparent 70%);
  --step-color: var(--color-50);
  --step-background: var(--color-90);
  --step-hover-color: var(--color-30);
  --step-hover-background: var(--color-80);
  --step-disabled-color: var(--grey-70);
  --step-disabled-background: var(--grey-95);
  --tick-color: var(--track-border);
  --value-color: var(--grey-20);
  --scale-color: var(--grey-40);
}
:where(#{$dark-theme} .range) {
  --track-background: var(--color-15);
  --track-border: var(--color-35);
  --track-fill: var(--color-50);
  --shadow-color: color-mix(in srgb, var(--thumb-color), white 20%);
  --shadow-focus-color: color-mix(in srgb, var(--thumb-color), transparent 55%);
  --step-color: var(--color-60);
  --step-background: var(--color-15);
  --step-hover-color: var(--color-70);
  --step-hover-background: var(--color-25);
  --step-disabled-color: var(--grey-30);
  --step-disabled-background: var(--grey-5);
  --value-color: var(--grey-80);
}

.range {
  --position: 0.5;
  --min-position: 0.25;
  --max-position: 0.75;
  --min-percent: 0;
  --max-percent: 100%;
  --track-border-width: 1px;
  --track-height: calc(0.5em + var(--track-border-width) * 2);
  --track-half: calc(var(--track-height) / 2);
  --selection-border-offset: 0px;
  --thumb-size: calc(1em + var(--track-border-width) * 2);
  --thumb-size: 1.25em;
  --thumb-half: calc(var(--thumb-size) / 2);
  --thumb-opacity: 1;
  --track-offset: var(--track-border-width);
  --thumbs-offset: calc(var(--thumb-half) - var(--track-border-width));
  --shadow-size: 0px;
  --shadow-focus-size: 8px;
  --z-index: 100;
  --percent: 50%;
  --steps: 1;
  --ticks-offset: calc(var(--thumbs-offset) + var(--track-border-width));
  --tick-length: 4px;
  --tick-width: 1px;
  --tick-radius: 1px;
  --tick-offset: calc(0px - var(--tick-length));
  --value-size: var(--size-medium);
  --scale-size: var(--size-smaller);
  --transition-time: var(--unit-transition);
  --inputs-gap: 1rem;
  --gap: 0.75rem;
  width: 100%;
  display: grid;
  grid-template-columns: repeat(1, minmax(0, 1fr));
  gap: var(--gap);
  touch-action: none;
  // border: 1px dashed red;
  &.range-dragging {
    --track-fill: var(--track-dragging);
  }
  &.range-has-scale {
    padding-bottom: 1.5em;
  }
  .range-slider {
    width: 100%;
    height: 1em;
    position: relative;
  }
  .range-track {
    cursor: pointer;
    position: absolute;
    left: var(--track-offset);
    right: var(--track-offset);
    top: 50%;
    transform: translateY(-50%);
    height: var(--track-height);
    border-radius: var(--track-half);
    border: var(--track-border-width) solid var(--track-border);
    background-color: var(--track-background);
    overflow: visible;
    .range-selection {
      position: absolute;
      top: var(--selection-border-offset);
      bottom: var(--selection-border-offset);
      left: calc(var(--selection-border-offset) + var(--min-percent));
      right: calc(100% - var(--max-percent));
      border-color: var(--track-fill);
      border-radius: var(--track-half);
      background-color: var(--track-fill);
      transition: background-color var(--transition-time);
    }
    .range-thumbs {
      position: absolute;
      left: var(--thumbs-offset);
      right: var(--thumbs-offset);
      top: 0px;
      bottom: 0px;
    }
  }
  .range-thumb {
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    width:  var(--thumb-size);
    height: var(--thumb-size);
    border-radius: var(--thumb-half);
    box-shadow: 0 0 0 var(--shadow-size) var(--shadow-color);
    transition: box-shadow 300ms, opacity 300ms;
    background-color: var(--thumb-color);
    opacity: var(--thumb-opacity);
    transition: background-color var(--transition-time);
    &.min {
      left: var(--min-percent);
    }
    &.max {
      left: var(--max-percent);
    }
    &:hover, &:focus, &.dragging {
      outline: none;
      opacity: 1;
      --shadow-size: var(--shadow-focus-size);
      --shadow-color: var(--shadow-focus-color);
    }
  }
  .range-limits {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    line-height: 1;
    user-select: none;
  }
  .range-scale-value {
    font-size: var(--scale-size);
    color: var(--scale-color);
  }
  .range-ticks {
    position: absolute;
    top: var(--tick-offset);
    bottom: var(--tick-offset);
    left: var(--ticks-offset);
    right: var(--ticks-offset);
    display: flex;
    justify-content: space-between;
    .range-tick {
      position: relative;
      height: 100%;
      width: var(--tick-width);
      background-color: var(--tick-color);
      border-radius: var(--tick-radius);
      .range-scale-value {
        position: absolute;
        left: 0;
        bottom: calc(0px - var(--gap) - var(--scale-size));
        transform: translateX(-50%);
      }
    }
  }
  .range-inputs {
    display: flex;
    // justify-content: center;
    justify-content: space-between;
    gap: var(--inputs-gap);
    &.center, &.centre {
      justify-content: center;
    }
    &.space {
      justify-content: space-between;
    }
    &.left {
      justify-content: flex-start;
    }
    &.right {
      justify-content: flex-end;
    }
  }
  .range-input {
    width: auto;
    // width: 100%;
    text-align: center;
    &.range-has-scale {
      margin-top: calc(var(--gap) * 2);
    }
    input {
      text-align: center;
    }
    .step {
      color: var(--step-color);
      background-color: var(--step-background);
      &.disabled {
        color: var(--step-disabled-color);
        background-color: var(--step-disabled-background);
      }
      &:hover:not(.disabled) {
        color: var(--step-hover-color);
        background-color: var(--step-hover-background);
        cursor: pointer;
      }
    }
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      margin: 0;
      appearance:none;
      -webkit-appearance: none;
    }
    input[type=number] {
      appearance:textfield;
      -moz-appearance:textfield;
    }
  }

  .range-output {
    width: 100%;
    min-height: 1.5em;
    position: relative;
    .range-value {
      position: absolute;
      line-height: 1;
      font-size: var(--value-size);
      color: var(--value-color);
      // bottom: 0.25em;
      bottom: 0;
      &.thumb {
        left: var(--percent);
        transform: translateX(calc(0% - var(--percent)));
        &.min {
          --percent: var(--min-percent);
        }
        &.max {
          --percent: var(--max-percent);
        }
      }
      &.center {
        left: 50%;
        transform: translateX(-50%);
      }
    }
  }
  &.OLD-min-max {
    --min-position: 0.25;
    --max-position: 0.75;
    --min-percent: 25%;
    --max-percent: 75%;
    .range-track {
      .range-selection {
        left: calc(var(--selection-border-offset) + var(--min-percent));
        // width: calc(var(--percent) + var(--thumb-size) * (1 - var(--position)));
        width: auto;
        right: calc(100% - var(--max-percent));
      }
    }
    .range-thumb {
      &.min {
        left: var(--min-percent);
      }
      &.max {
        left: var(--max-percent);
      }
    }
    .range-inputs {
      display: flex;
      justify-content: space-between;
      .range-input {
        width: auto;
      }
    }
    .range-output {
      .range-value {
        &.thumb.min {
          --percent: var(--min-percent);
        }
        &.thumb.max {
          --percent: var(--max-percent);
        }
      }
    }
    &.debug {
      border: 1px dashed red;
      .range-inputs {
        border: 1px dashed rebeccapurple;
      }
    }
  }
  &.max {
    .range-inputs {
      // justify-content: center;
    }
  }
}
